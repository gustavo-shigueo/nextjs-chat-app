@layer components {
	.control {
		--input-text-color: var(--color-neutral-800);
		--input-back-color: var(--color-neutral-200) / 0.15;

		grid-column: span var(--col-span, 12);
		color: hsl(var(--input-text-color));
		position: relative;

		& > :is(input, select, textarea) {
			outline-offset: 3px;

			color: hsl(var(--input-text-color));

			background-color: hsl(var(--input-back-color));
			outline-color: hsl(var(--input-text-color));
			border-color: hsl(var(--input-text-color));
			box-shadow: var(--box-shadow-small);

			&:-webkit-autofill {
				border: 2px solid hsl(var(--input-text-color));
				-webkit-text-fill-color: hsl(var(--input-text-color));
				-webkit-box-shadow: var(--box-shadow-small);
				box-shadow: var(--box-shadow-small);
			}
		}

		& > :is(input, select, textarea) ~ .error-message {
			display: none;
			font-size: 0.75em;
			margin-block-start: var(--size-100);
		}

		&
			> :is(input, select, textarea):is(.invalid, :invalid)[data-dirty='true']
			~ .error-message {
			display: block;
		}

		& > select > option {
			color: hsl(var(--color-neutral-900));
			background-color: hsl(var(--color-neutral-200));
		}

		& > ::placeholder {
			color: inherit;
		}

		& > :not(.show-placeholder)::placeholder {
			color: transparent;
		}

		&[data-control-type='buttons'] {
			display: grid;
			grid-auto-flow: column;
			justify-content: end;
			gap: var(--size-200);

			@container (width < 30em) {
				grid-auto-flow: row;
				grid-auto-columns: 1fr;
				grid-auto-rows: 1fr;

				& > * {
					width: 100%;
				}
			}
		}

		&:is([data-control-type='text'], [data-control-type='select']) {
			display: flex;
			flex-flow: column nowrap;
		}

		&:is([data-control-type='text'], [data-control-type='select'])
			> :is(input, select, textarea) {
			width: 100%;
			min-height: 2em; /* makes sure inputs and selects have the same height */
			padding: var(--size-100);

			border-width: 2px;
			border-style: solid;

			border-radius: var(--size-100);
		}

		&[data-control-size='small'] {
			--col-span: 3;
		}

		&[data-control-size='medium'] {
			--col-span: 4;
		}

		&[data-control-size='large'] {
			--col-span: 6;
		}

		&:is([data-control-size='full'], :not([data-control-size])) {
			grid-column: 1 / -1;
		}

		@container (width < 50em) {
			grid-column: 1 / -1;
		}

		::-ms-reveal {
			display: none;
		}

		& > .icon {
			display: grid;
			place-items: center;

			position: absolute;
			aspect-ratio: 1;
			min-block-size: calc(2em - 4px);

			inset-block-start: var(--size-500);

			background-color: transparent;
			border: none;
			color: inherit;

			transition: background-color 150ms ease-in-out;

			&:hover {
				background-color: hsl(var(--color-neutral-500) / 0.15);
			}
		}

		& > :is(input, select, textarea) + .icon {
			inset-inline-end: 2px;
		}

		& > .icon + :is(input, select, textarea) {
			padding-inline-start: calc(2em + var(--size-100));
		}

		@supports selector(:has(p)) {
			& > .icon:has(+ :is(input, select, textarea)) {
				inset-inline-start: 2px;
			}

			&:has(> :where(:is(input, textarea):invalid[data-dirty='true']), .invalid[data-dirty='true']) {
				--input-text-color: var(--color-danger-500);
				--input-back-color: var(--color-danger-200) / 0.125;
			}

			&:has(> :where(:is(input, select, textarea):focus)) {
				--input-text-color: var(--color-primary-600);
				--input-back-color: var(--color-primary-200) / 0.125;
			}

			&:has(> :where(:is(input, select, textarea):valid)) {
				--input-text-color: var(--color-success-600);
				--input-back-color: var(--color-success-200) / 0.125;
			}
		}
	}
}
